@* @page "/ControleTable"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
 

<h3>إضافة بيانات التحكم</h3>

<EditForm Model="controleTable" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

 

    <div class="form-group">
        <label for="mCode">M Code:</label>
        <select id="mCode" @bind="controleTable.M_Code" class="form-control">
            <option value="">اختر M Code</option>
            @foreach (var item in markets)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="region">المنطقة:</label>
        <select id="region" @bind="controleTable.region" class="form-control">
            <option value="">اختر المنطقة</option>
            @foreach (var item in regions)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="city">المدينة:</label>
        <select id="city" @bind="controleTable.city" class="form-control">
            <option value="">اختر المدينة</option>
            @foreach (var item in Cities)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="shopeName">اسم المتجر:</label>
        <InputText id="shopeName" @bind-Value="controleTable.shopeName" class="form-control" />
        <ValidationMessage For="@(() => controleTable.shopeName)" />
    </div>

    <div class="form-group">
        <label for="address">العنوان:</label>
        <InputText id="address" @bind-Value="controleTable.Address" class="form-control" />
        <ValidationMessage For="@(() => controleTable.Address)" />
    </div>

    <div class="form-group">
        <label for="street">الشارع:</label>
        <InputText id="street" @bind-Value="controleTable.Street" class="form-control" />
        <ValidationMessage For="@(() => controleTable.Street)" />
    </div>

    <div class="form-group">
        <label for="nerestPoint">أقرب نقطة:</label>
        <InputText id="nerestPoint" @bind-Value="controleTable.NerestPoint" class="form-control" />
        <ValidationMessage For="@(() => controleTable.NerestPoint)" />
    </div>

   

    <button type="submit" class="btn btn-primary">إرسال</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p class="message">@message</p>
}

@code {
    private Models.ControleTable controleTable = new Models.ControleTable();
    private string message;
    
    //private List<string> mCodes = new List<string>();
    //  private List<string> regions = new List<string>();
    //private List<string> cities = new List<string>();
    private List<Models.GetMarket> markets = new List<Models.GetMarket>();
    private List<Models.GetRegion> regions = new List<Models.GetRegion>();
    private List<Models.GetCities> Cities = new List<Models.GetCities>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var marketsResponse = await Http.GetFromJsonAsync<List<Models.GetMarket>>("https://localhost:7252/Vendor/markets");
            if (marketsResponse != null)
            {
                markets = marketsResponse;
                Console.WriteLine("Markets fetched successfully.");
            }
            else
            {
                Console.WriteLine("Markets response is null.");
                message = "فشل في جلب بيانات الأسواق: البيانات غير موجودة";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching markets: {ex.Message}");
            message = $"فشل في جلب بيانات الأسواق: {ex.Message}";
        }

        try
        {
            var regionsResponse = await Http.GetFromJsonAsync<List<Models.GetRegion>>("https://localhost:7252/Vendor/Regin");
            if (regionsResponse != null)
            {
                regions = regionsResponse;
                Console.WriteLine("Regions fetched successfully.");
            }
            else
            {
                Console.WriteLine("Regions response is null.");
                message = "فشل في جلب بيانات المناطق: البيانات غير موجودة";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching regions: {ex.Message}");
            message = $"فشل في جلب بيانات المناطق: {ex.Message}";
        }

        try
        {
            var CityResponse = await Http.GetFromJsonAsync<List<Models.GetCities>>("https://localhost:7252/Vendor/City");
            if (CityResponse != null)
            {
                Cities = CityResponse;
                Console.WriteLine("city fetched successfully.");
            }
            else
            {
                Console.WriteLine("city response is null.");
                message = "فشل في جلب بيانات المدن: البيانات غير موجودة";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching ciry: {ex.Message}");
            message = $"فشل في جلب بيانات المناطق: {ex.Message}";
        }

    }

    private async Task HandleValidSubmit()
    {

      var   id_vendor = await JS.InvokeAsync<string>("sessionStorage.getItem", "id_vendor");
       
      if (int.TryParse(id_vendor, out int idVendor))
        {
            controleTable.id_vendor = idVendor; // تعيين القيمة إلى controleTable
        }
        else
        {
            message = "فشل في استرجاع id_vendor من sessionStorage.";
            return; // إنهاء الدالة إذا كانت القيمة غير صالحة
        }

      


        var response = await Http.PostAsJsonAsync("https://localhost:7252/ControlTable/Create", controleTable);
        if (response.IsSuccessStatusCode)
        {
            message = "تم إرسال البيانات بنجاح!";
            ResetForm();
        }
        else
        {
            message = "حدث خطأ أثناء إرسال البيانات.";
        }
    }

    private void ResetForm()
    {
        controleTable = new Models.ControleTable();
        message = string.Empty;
    }
 
} *@

      @page "/ControleTable"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>إضافة بيانات التحكم</h3>

<EditForm Model="controleTable" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="mCode">M Code:</label>
        <select id="mCode" @bind="controleTable.M_Code" class="form-control">
            <option value="">اختر M Code</option>
            @foreach (var item in markets)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="region">المنطقة:</label>
        <select id="region" @bind="controleTable.region" class="form-control">
            <option value="">اختر المنطقة</option>
            @foreach (var item in regions)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="city">المدينة:</label>
        <select id="city" @bind="controleTable.city" class="form-control">
            <option value="">اختر المدينة</option>
            @foreach (var item in Cities)
            {
                <option value="@item.Code">@item.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="shopeName">اسم المتجر:</label>
        <InputText id="shopeName" @bind-Value="controleTable.shopeName" class="form-control" />
        <ValidationMessage For="@(() => controleTable.shopeName)" />
    </div>

    <div class="form-group">
        <label for="address">العنوان:</label>
        <InputText id="address" @bind-Value="controleTable.Address" class="form-control" />
        <ValidationMessage For="@(() => controleTable.Address)" />
    </div>

    <div class="form-group">
        <label for="street">الشارع:</label>
        <InputText id="street" @bind-Value="controleTable.Street" class="form-control" />
        <ValidationMessage For="@(() => controleTable.Street)" />
    </div>

    <div class="form-group">
        <label for="nerestPoint">أقرب نقطة:</label>
        <InputText id="nerestPoint" @bind-Value="controleTable.NerestPoint" class="form-control" />
        <ValidationMessage For="@(() => controleTable.NerestPoint)" />
    </div>

    <button type="submit" class="btn btn-primary">إرسال</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p class="message">@message</p>
}

@code {
    private Models.ControleTable controleTable = new Models.ControleTable();
    private string message;

    private List<Models.GetMarket> markets = new List<Models.GetMarket>();
    private List<Models.GetRegion> regions = new List<Models.GetRegion>();
    private List<Models.GetCities> Cities = new List<Models.GetCities>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            markets = await Http.GetFromJsonAsync<List<Models.GetMarket>>("https://localhost:7252/Vendor/markets") ?? new List<Models.GetMarket>();
            regions = await Http.GetFromJsonAsync<List<Models.GetRegion>>("https://localhost:7252/Vendor/Regin") ?? new List<Models.GetRegion>();
            Cities = await Http.GetFromJsonAsync<List<Models.GetCities>>("https://localhost:7252/Vendor/City") ?? new List<Models.GetCities>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            message = "فشل في جلب البيانات.";
        }
    }

    private async Task HandleValidSubmit()
    {
        var id_vendor = await JS.InvokeAsync<string>("sessionStorage.getItem", "id_vendor");

        if (int.TryParse(id_vendor, out int idVendor))
        {
            controleTable.id_vendor = idVendor;
        }
        else
        {
            message = "فشل في استرجاع id_vendor من sessionStorage.";
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7252/ControlTable/Create", controleTable);
        if (response.IsSuccessStatusCode)
        {
            message = "تم إرسال البيانات بنجاح!";
            ResetForm();

            // تخزين id_vendor في sessionStorage لصفحة عرض البيانات
            await JS.InvokeVoidAsync("sessionStorage.setItem", "vendorDataId", idVendor.ToString());

            // إعادة التوجيه إلى صفحة عرض بيانات البائع دون تمرير idVendor في الرابط
            NavigationManager.NavigateTo("/vendor-data");
        }
        else
        {
            message = "حدث خطأ أثناء إرسال البيانات.";
        }
    }

    private void ResetForm()
    {
        controleTable = new Models.ControleTable();
        message = string.Empty;
    }
}
